[
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} num 数值",
                "name": "num",
                "description": "<p>数值</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}     千分位字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>千分位字符串</p>"
            },
            {
                "type": "example",
                "string": "\nthousands(123);\n// => '123'",
                "html": "<p>thousands(123);<br />\n// =&gt; '123'</p>"
            },
            {
                "type": "example",
                "string": "\nthousands(1234);\n// => '1,234'",
                "html": "<p>thousands(1234);<br />\n// =&gt; '1,234'</p>"
            },
            {
                "type": "example",
                "string": "\nthousands(1234567);\n// => '1,234,567'",
                "html": "<p>thousands(1234567);<br />\n// =&gt; '1,234,567'</p>"
            }
        ],
        "description": {
            "full": "<p>千分位展示</p>",
            "summary": "<p>千分位展示</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 1,
        "codeStart": 20,
        "code": "const thousands = num => {\n    const data = +num || 0;\n    if (!data) {\n        return num;\n    }\n    const [int, dec] = String(num).split('.');\n    const formatInt = int.replace(/(?=(?!^)(\\d{3})+$)/g, ',');\n    if (+dec) {\n        return [formatInt, dec].join('.');\n    }\n    return formatInt;\n};",
        "ctx": {
            "type": "declaration",
            "name": "thousands",
            "value": "num => {",
            "string": "thousands"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} value 数值",
                "name": "value",
                "description": "<p>数值</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Number} min   最小值",
                "name": "min",
                "description": "<p>最小值</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Number} max   最大值",
                "name": "max",
                "description": "<p>最大值</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Number}       区间值",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>区间值</p>"
            },
            {
                "type": "example",
                "string": "\ngetValueInRange(1, 2, 7);\n// => 2",
                "html": "<p>getValueInRange(1, 2, 7);<br />\n// =&gt; 2</p>"
            },
            {
                "type": "example",
                "string": "\ngetValueInRange(3, 2, 7);\n// => 3",
                "html": "<p>getValueInRange(3, 2, 7);<br />\n// =&gt; 3</p>"
            },
            {
                "type": "example",
                "string": "\ngetValueInRange(12, 2, 7);\n// => 7",
                "html": "<p>getValueInRange(12, 2, 7);<br />\n// =&gt; 7</p>"
            }
        ],
        "description": {
            "full": "<p>取区间值</p>",
            "summary": "<p>取区间值</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 33,
        "codeStart": 53,
        "code": "const getValueInRange = (value, min, max) => {\n    if (value < min) {\n        return min;\n    }\n    if (value > max) {\n        return max;\n    }\n    return value;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getValueInRange",
            "value": "(value, min, max) => {",
            "string": "getValueInRange"
        }
    }
]