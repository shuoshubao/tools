[
    {
        "tags": [],
        "description": {
            "full": "<p>eslint-disable no-use-before-define</p>",
            "summary": "<p>eslint-disable no-use-before-define</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 1,
        "codeStart": 3,
        "code": "import { isNumber, kebabCase, last, uniq } from 'lodash';\nimport { isEmptyObject } from './types';",
        "ctx": false
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{HTMLElement} element   dom元素",
                "name": "element",
                "description": "<p>dom元素</p>",
                "types": [
                    "HTMLElement"
                ],
                "typesDescription": "<code>HTMLElement</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [attrs] 属性",
                "name": "[attrs]",
                "description": "<p>属性</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}       undefined",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>undefined</p>"
            },
            {
                "type": "example",
                "string": "\nsetAttrs(eDiv, { id: 1, class: 'abc' })\n// => <div id=\"1\" class=\"abc\"></div>",
                "html": "<p>setAttrs(eDiv, { id: 1, class: 'abc' })<br />\n// =&gt; <div id=\"1\" class=\"abc\"></div></p>"
            }
        ],
        "description": {
            "full": "<p>给元素批量设置属性</p>",
            "summary": "<p>给元素批量设置属性</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 6,
        "codeStart": 16,
        "code": "const setAttrs = (element, attrs = {}) => {\n    Object.entries(attrs).forEach(([k, v]) => {\n        element.setAttribute(k, v);\n    });\n};",
        "ctx": {
            "type": "declaration",
            "name": "setAttrs",
            "value": "(element, attrs = {}) => {",
            "string": "setAttrs"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{*} blob    blob数据",
                "name": "blob",
                "description": "<p>blob数据</p>",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [options] a链接的属性",
                "name": "[options]",
                "description": "<p>a链接的属性</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}       undefined",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>undefined</p>"
            },
            {
                "type": "example",
                "string": "\ndownloadBlob(blobData, { download: 'demo.png' })\n// => 浏览器下载文件",
                "html": "<p>downloadBlob(blobData, { download: 'demo.png' })<br />\n// =&gt; 浏览器下载文件</p>"
            }
        ],
        "description": {
            "full": "<p>下载 blob</p>",
            "summary": "<p>下载 blob</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 22,
        "codeStart": 32,
        "code": "const downloadBlob = (blob, options = {}) => {\n    const fileReader = new FileReader();\n    fileReader.readAsDataURL(blob);\n    fileReader.onload = e => {\n        const elmentA = document.createElement('a');\n        const href = e.target.result;\n        setAttrs(elmentA, { ...options, href });\n        document.body.appendChild(elmentA);\n        elmentA.click();\n        document.body.removeChild(elmentA);\n    };\n};",
        "ctx": {
            "type": "declaration",
            "name": "downloadBlob",
            "value": "(blob, options = {}) => {",
            "string": "downloadBlob"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} url    文件地址",
                "name": "url",
                "description": "<p>文件地址</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} config a 链接的属性",
                "name": "config",
                "description": "<p>a 链接的属性</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}       undefined",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>undefined</p>"
            },
            {
                "type": "example",
                "string": "\ndownload('https://github.githubassets.com/favicons/favicon.png', { download: 'favicon.ico' })\n// => 浏览器下载文件",
                "html": "<p>download('https://github.githubassets.com/favicons/favicon.png', { download: 'favicon.ico' })<br />\n// =&gt; 浏览器下载文件</p>"
            }
        ],
        "description": {
            "full": "<p>下载文件</p>",
            "summary": "<p>下载文件</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 45,
        "codeStart": 55,
        "code": "const download = (url = '', config = {}) => {\n    const elmentA = document.createElement('a');\n    document.body.append(elmentA);\n    const downloadFileName = last(url.split('/'));\n    setAttrs(elmentA, {\n        href: url,\n        download: downloadFileName,\n        target: '_blank',\n        rel: 'noopener noreferrer',\n        ...config\n    });\n    setStyle(elmentA, {\n        display: 'none !important'\n    });\n    elmentA.click();\n    document.body.removeChild(elmentA);\n};",
        "ctx": {
            "type": "declaration",
            "name": "download",
            "value": "(url = '', config = {}) => {",
            "string": "download"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} [cssom] css 对象",
                "name": "[cssom]",
                "description": "<p>css 对象</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Object}       带有'px'单位的 cssom",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>带有'px'单位的 cssom</p>"
            },
            {
                "type": "example",
                "string": "\nconvertCssom({ width: 100, height: 200 })\n// => { width: '100px', height: '200px' }",
                "html": "<p>convertCssom({ width: 100, height: 200 })<br />\n// =&gt; { width: '100px', height: '200px' }</p>"
            },
            {
                "type": "example",
                "string": "\nconvertCssom({ width: 100, minHeight: 100, marginTop: 10, paddingBottom: 10 })\n// => { width: '100px', 'min-height': '100px', 'margin-top': '10px', 'padding-bottom': '10px' }",
                "html": "<p>convertCssom({ width: 100, minHeight: 100, marginTop: 10, paddingBottom: 10 })<br />\n// =&gt; { width: '100px', 'min-height': '100px', 'margin-top': '10px', 'padding-bottom': '10px' }</p>"
            }
        ],
        "description": {
            "full": "<p>给cssom加上单位px</p>",
            "summary": "<p>给cssom加上单位px</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 73,
        "codeStart": 87,
        "code": "const convertCssom = (cssom = {}) => {\n    // 当值为数字时, 加上单位 `px` 的css属性\n    const DefaultUnitsPxProperties = ['font-size', 'margin', 'padding', 'border'];\n\n    // margin, padding, border\n    ['top', 'right', 'bottom', 'left'].forEach(v => {\n        DefaultUnitsPxProperties.push(v);\n        DefaultUnitsPxProperties.push(['margin', v].join('-'));\n        DefaultUnitsPxProperties.push(['padding', v].join('-'));\n        DefaultUnitsPxProperties.push(['border', v, 'width'].join('-'));\n    });\n\n    // max min\n    ['width', 'height'].forEach(v => {\n        DefaultUnitsPxProperties.push(v);\n        DefaultUnitsPxProperties.push(['max', v].join('-'), ['min', v].join('-'));\n    });\n\n    return Object.entries(cssom).reduce((prev, [k, v]) => {\n        const key = kebabCase(k);\n        // 对于一些特定属性, 当值为数字时, 加上单位 px\n        if (isNumber(v) && DefaultUnitsPxProperties.includes(key)) {\n            prev[key] = `${v}px`;\n        } else {\n            prev[key] = v;\n        }\n        return prev;\n    }, {});\n};",
        "ctx": {
            "type": "declaration",
            "name": "convertCssom",
            "value": "(cssom = {}) => {",
            "string": "convertCssom"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{HTMLElement} element   dom元素",
                "name": "element",
                "description": "<p>dom元素</p>",
                "types": [
                    "HTMLElement"
                ],
                "typesDescription": "<code>HTMLElement</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{StyleSheet} cssom   cssom",
                "name": "cssom",
                "description": "<p>cssom</p>",
                "types": [
                    "StyleSheet"
                ],
                "typesDescription": "<code>StyleSheet</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}       undefined",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>undefined</p>"
            },
            {
                "type": "example",
                "string": "\nsetStyle(eDiv, { width: 100, color: 'red' })\n// => <div style=\"width: 100px; color: red;\"></div>",
                "html": "<p>setStyle(eDiv, { width: 100, color: 'red' })<br />\n// =&gt; <div style=\"width: 100px; color: red;\"></div></p>"
            }
        ],
        "description": {
            "full": "<p>给元素批量设置样式</p>",
            "summary": "<p>给元素批量设置样式</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 117,
        "codeStart": 127,
        "code": "const setStyle = (element, cssom) => {\n    const computedCssom = convertCssom(cssom);\n    Object.entries(computedCssom).forEach(([k, v]) => {\n        element.style[k] = v;\n    });\n};",
        "ctx": {
            "type": "declaration",
            "name": "setStyle",
            "value": "(element, cssom) => {",
            "string": "setStyle"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{StyleSheet} cssom   cssom",
                "name": "cssom",
                "description": "<p>cssom</p>",
                "types": [
                    "StyleSheet"
                ],
                "typesDescription": "<code>StyleSheet</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}       cssText 字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>cssText 字符串</p>"
            },
            {
                "type": "example",
                "string": "\ngetCssText({ width: 100, color: 'red' })\n// => 'width: 100px; color: red;'",
                "html": "<p>getCssText({ width: 100, color: 'red' })<br />\n// =&gt; 'width: 100px; color: red;'</p>"
            }
        ],
        "description": {
            "full": "<p>获取 cssText</p>",
            "summary": "<p>获取 cssText</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 134,
        "codeStart": 143,
        "code": "const getCssText = (cssom = {}) => {\n    if (isEmptyObject(cssom)) {\n        return '';\n    }\n    const computedCssom = convertCssom(cssom);\n    const cssText = Object.entries(computedCssom)\n        .reduce((prev, [k, v]) => {\n            prev.push([k, v].join(': '));\n            return prev;\n        }, [])\n        .join('; ');\n    return [cssText, ';'].join('');\n};",
        "ctx": {
            "type": "declaration",
            "name": "getCssText",
            "value": "(cssom = {}) => {",
            "string": "getCssText"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} word  字符串",
                "name": "word",
                "description": "<p>字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{StyleSheet} cssom   cssom",
                "name": "cssom",
                "description": "<p>cssom</p>",
                "types": [
                    "StyleSheet"
                ],
                "typesDescription": "<code>StyleSheet</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Number}       字符串在浏览器中所占的长度",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>字符串在浏览器中所占的长度</p>"
            },
            {
                "type": "example",
                "string": "getWordWidth('四个汉字')\n// => 56",
                "html": "<p>getWordWidth('四个汉字')<br />\n// =&gt; 56</p>"
            },
            {
                "type": "example",
                "string": "getWordWidth('汉字abc123')\n// => 78",
                "html": "<p>getWordWidth('汉字abc123')<br />\n// =&gt; 78</p>"
            }
        ],
        "description": {
            "full": "<p>获取字符串在浏览器中所占的长度</p>",
            "summary": "<p>获取字符串在浏览器中所占的长度</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 157,
        "codeStart": 171,
        "code": "const getWordWidth = (word = '', cssom = {}) => {\n    const eleSpan = document.createElement('span');\n    const defaultCssom = { visibility: 'hidden', whiteSpace: 'nowrap', fontSize: 14 };\n    eleSpan.style.cssText = getCssText({\n        ...defaultCssom,\n        ...cssom\n    });\n    document.body.appendChild(eleSpan);\n    eleSpan.innerText = word;\n    const width = eleSpan.offsetWidth;\n    document.body.removeChild(eleSpan);\n    return Math.ceil(Number.parseFloat(width));\n};",
        "ctx": {
            "type": "declaration",
            "name": "getWordWidth",
            "value": "(word = '', cssom = {}) => {",
            "string": "getWordWidth"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{*} text   要复制的文本",
                "name": "text",
                "description": "<p>要复制的文本</p>",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}       undefined",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>undefined</p>"
            },
            {
                "type": "example",
                "string": "\ncopyText('abc')\n// => 复制内容到粘贴板",
                "html": "<p>copyText('abc')<br />\n// =&gt; 复制内容到粘贴板</p>"
            },
            {
                "type": "example",
                "string": "\ncopyText('abc\\n123')\n// => 复制内容到粘贴板",
                "html": "<p>copyText('abc\\n123')<br />\n// =&gt; 复制内容到粘贴板</p>"
            }
        ],
        "description": {
            "full": "<p>复制文本</p>",
            "summary": "<p>复制文本</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 185,
        "codeStart": 199,
        "code": "const copyText = (text = '') => {\n    const textarea = document.createElement('textarea');\n    textarea.value = text;\n    document.body.appendChild(textarea);\n    textarea.select();\n    document.execCommand('copy');\n    document.body.removeChild(textarea);\n};",
        "ctx": {
            "type": "declaration",
            "name": "copyText",
            "value": "(text = '') => {",
            "string": "copyText"
        }
    },
    {
        "tags": [
            {
                "type": "see",
                "string": "https://www.npmjs.com/package/classnames",
                "title": "",
                "url": "https://www.npmjs.com/package/classnames",
                "html": "<p>https://www.npmjs.com/package/classnames</p>"
            },
            {
                "type": "param",
                "string": "{...*} args   每个className的描述",
                "name": "args",
                "description": "<p>每个className的描述</p>",
                "types": "[object Object]",
                "typesDescription": "...*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": true
            },
            {
                "type": "return",
                "string": "{String}       className 字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>className 字符串</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames('foo', 'bar')\n// => 'foo bar'",
                "html": "<p>classNames('foo', 'bar')<br />\n// =&gt; 'foo bar'</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames('foo', { bar: true })\n// => 'foo bar'",
                "html": "<p>classNames('foo', { bar: true })<br />\n// =&gt; 'foo bar'</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames({ 'foo-bar': true })\n// => 'foo-bar'",
                "html": "<p>classNames({ 'foo-bar': true })<br />\n// =&gt; 'foo-bar'</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames({ 'foo-bar': false })\n// => ''",
                "html": "<p>classNames({ 'foo-bar': false })<br />\n// =&gt; ''</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames({ foo: true }, { bar: true })\n// => 'foo bar'",
                "html": "<p>classNames({ foo: true }, { bar: true })<br />\n// =&gt; 'foo bar'</p>"
            },
            {
                "type": "example",
                "string": "\nclassNames({ foo: true, bar: true })\n// => 'foo bar'",
                "html": "<p>classNames({ foo: true, bar: true })<br />\n// =&gt; 'foo bar'</p>"
            }
        ],
        "description": {
            "full": "<p>classNames</p>",
            "summary": "<p>classNames</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 208,
        "codeStart": 243,
        "code": "const classNames = (...args) => {\n    const classNameList = [];\n    []\n        .concat(...args)\n        .filter(Boolean)\n        .forEach(v => {\n            if (typeof v === 'object') {\n                Object.entries(v).forEach(([k2, v2]) => {\n                    if (v2) {\n                        classNameList.push(k2);\n                    }\n                });\n            } else {\n                classNameList.push(String(v || '').trim());\n            }\n        });\n    return uniq(classNameList.join(' ').split(' ').filter(Boolean)).join(' ');\n};",
        "ctx": {
            "type": "declaration",
            "name": "classNames",
            "value": "(...args) => {",
            "string": "classNames"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} [baseClassName='']   基准 ClassName",
                "name": "[baseClassName='']",
                "description": "<p>基准 ClassName</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [suffixConfig={}]   classNames 对象",
                "name": "[suffixConfig={}]",
                "description": "<p>classNames 对象</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [config={separator: '-'}]   classNames 对象",
                "name": "[config={separator: '-'}]",
                "description": "<p>classNames 对象</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}       className 字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>className 字符串</p>"
            },
            {
                "type": "example",
                "string": "\nsuffixClassNames('table', { bordered: true, shadow: false })\n// => 'table table-bordered'",
                "html": "<p>suffixClassNames('table', { bordered: true, shadow: false })<br />\n// =&gt; 'table table-bordered'</p>"
            }
        ],
        "description": {
            "full": "<p>给 className 加后缀<br />\n适用于开发组件库时, 给className加作用域</p>",
            "summary": "<p>给 className 加后缀<br />\n适用于开发组件库时, 给className加作用域</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 262,
        "codeStart": 274,
        "code": "const suffixClassNames = (baseClassName = '', suffixConfig = {}, config = {}) => {\n    const computedConfig = {\n        separator: '-',\n        ...config\n    };\n    const classNameList = [baseClassName];\n    Object.entries(suffixConfig).forEach(([k, v]) => {\n        if (v) {\n            classNameList.push([baseClassName, k].join(computedConfig.separator));\n        }\n    });\n    return classNames(classNameList);\n};",
        "ctx": {
            "type": "declaration",
            "name": "suffixClassNames",
            "value": "(baseClassName = '', suffixConfig = {}, config = {}) => {",
            "string": "suffixClassNames"
        }
    }
]