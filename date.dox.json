[
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number|String|Date} date        日期",
                "name": "date",
                "description": "<p>日期</p>",
                "types": [
                    "Number",
                    "String",
                    "Date"
                ],
                "typesDescription": "<code>Number</code> | <code>String</code> | <code>Date</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} [format='YYYY-MM-DD']      格式化",
                "name": "[format='YYYY-MM-DD']",
                "description": "<p>格式化</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} [invalidText='--'] 解析错误时的返回",
                "name": "[invalidText='--']",
                "description": "<p>解析错误时的返回</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}             日期格式文本",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>日期格式文本</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime(1628659676589);\n// => '2021-08-11'",
                "html": "<p>formatTime(1628659676589);<br />\n// =&gt; '2021-08-11'</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime(1628659676589, 'YYYY-MM-DD HH:mm');\n// => '2021-08-11 13:27'",
                "html": "<p>formatTime(1628659676589, 'YYYY-MM-DD HH:mm');<br />\n// =&gt; '2021-08-11 13:27'</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime(1628659676589, 'YYYY-MM-DD HH:mm:ss');\n// => '2021-08-11 13:27:56'",
                "html": "<p>formatTime(1628659676589, 'YYYY-MM-DD HH:mm:ss');<br />\n// =&gt; '2021-08-11 13:27:56'</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime(new Date('2021-08-11 13:27:56'));\n// => '2021-08-11'",
                "html": "<p>formatTime(new Date('2021-08-11 13:27:56'));<br />\n// =&gt; '2021-08-11'</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime('2021-08-11 13:27:56');\n// => '2021-08-11'",
                "html": "<p>formatTime('2021-08-11 13:27:56');<br />\n// =&gt; '2021-08-11'</p>"
            },
            {
                "type": "example",
                "string": "\nformatTime(null);\n// => '--'",
                "html": "<p>formatTime(null);<br />\n// =&gt; '--'</p>"
            }
        ],
        "description": {
            "full": "<p>日期格式化<br />\n参考: <a href=\"https://dayjs.gitee.io/docs/zh-CN/display/format\">dayjs.format</a></p>",
            "summary": "<p>日期格式化<br />\n参考: <a href=\"https://dayjs.gitee.io/docs/zh-CN/display/format\">dayjs.format</a></p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 1,
        "codeStart": 38,
        "code": "const formatTime = (date, format = 'YYYY-MM-DD', invalidText = '--') => {\n    const WeekTextMap = ['日', '一', '二', '三', '四', '五', '六'];\n    if (+date <= 0) {\n        return invalidText;\n    }\n    const dt = new Date(+date || +new Date(date));\n    const year = dt.getFullYear();\n    const month = dt.getMonth() + 1;\n    const day = dt.getDate();\n    const hour = dt.getHours();\n    const minute = dt.getMinutes();\n    const second = dt.getSeconds();\n    const week = `星期${WeekTextMap[dt.getDay()]}`;\n    const parse = {\n        YYYY: year,\n        MM: month,\n        DD: day,\n        HH: hour,\n        mm: minute,\n        ss: second,\n        w: week\n    };\n\n    parse.yyyy = parse.YYYY;\n    parse.dd = parse.DD;\n    parse.hh = parse.HH;\n\n    // 补零\n    Object.entries(parse).forEach(([k, v]) => {\n        parse[k] = String(v).padStart(2, 0);\n    });\n\n    // 上午|下午\n    parse.a = hour / 12 >= 1 ? 'pm' : 'am';\n    parse.A = parse.a.toUpperCase();\n\n    return Object.entries(parse).reduce((prev, [k, v]) => {\n        return prev.replace(k, v);\n    }, format);\n};",
        "ctx": {
            "type": "declaration",
            "name": "formatTime",
            "value": "(date, format = 'YYYY-MM-DD', invalidText = '--') => {",
            "string": "formatTime"
        }
    }
]