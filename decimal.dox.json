[
    {
        "tags": [
            {
                "type": "param",
                "string": "{...Number} [args] 加数",
                "name": "[args]",
                "description": "<p>加数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "...<code>Number</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": true
            },
            {
                "type": "return",
                "string": "{Number} 运算之和",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>运算之和</p>"
            },
            {
                "type": "example",
                "string": "\nplus(0.1, 0.2)\n// => 0.3",
                "html": "<p>plus(0.1, 0.2)<br />\n// =&gt; 0.3</p>"
            },
            {
                "type": "example",
                "string": "\nplus(0.1, 0.1, 0.1)\n// => 0.3",
                "html": "<p>plus(0.1, 0.1, 0.1)<br />\n// =&gt; 0.3</p>"
            },
            {
                "type": "example",
                "string": "\nplus([0.1, 0.1, 0.1])\n// => 0.3",
                "html": "<p>plus([0.1, 0.1, 0.1])<br />\n// =&gt; 0.3</p>"
            }
        ],
        "description": {
            "full": "<p>浮点数计算-加法</p>",
            "summary": "<p>浮点数计算-加法</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 21,
        "codeStart": 40,
        "code": "const plus = (...args) => {\n    return [].concat(...args).reduce((prev, cur) => {\n        return plusTwo(prev, cur);\n    }, 0);\n};",
        "ctx": {
            "type": "declaration",
            "name": "plus",
            "value": "(...args) => {",
            "string": "plus"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} a 减数",
                "name": "a",
                "description": "<p>减数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Number} b 被减数",
                "name": "b",
                "description": "<p>被减数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Number} 运算之差",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>运算之差</p>"
            },
            {
                "type": "example",
                "string": "\nminus(0.3, 0.1)\n// => 0.2",
                "html": "<p>minus(0.3, 0.1)<br />\n// =&gt; 0.2</p>"
            }
        ],
        "description": {
            "full": "<p>浮点数计算-减法</p>",
            "summary": "<p>浮点数计算-减法</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 46,
        "codeStart": 56,
        "code": "const minus = (a, b) => {\n    return plus(a, mulTwo(b, -1));\n};",
        "ctx": {
            "type": "declaration",
            "name": "minus",
            "value": "(a, b) => {",
            "string": "minus"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{...Number} [args] 乘数",
                "name": "[args]",
                "description": "<p>乘数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "...<code>Number</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": true
            },
            {
                "type": "return",
                "string": "{Number} 运算之积",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>运算之积</p>"
            },
            {
                "type": "example",
                "string": "\nmultiply(0.1, 0.2)\n// => 0.02",
                "html": "<p>multiply(0.1, 0.2)<br />\n// =&gt; 0.02</p>"
            },
            {
                "type": "example",
                "string": "\nmultiply(0.1, 0.1, 0.1)\n// => 0.001",
                "html": "<p>multiply(0.1, 0.1, 0.1)<br />\n// =&gt; 0.001</p>"
            },
            {
                "type": "example",
                "string": "\nmultiply([0.1, 0.1, 0.1])\n// => 0.001",
                "html": "<p>multiply([0.1, 0.1, 0.1])<br />\n// =&gt; 0.001</p>"
            }
        ],
        "description": {
            "full": "<p>浮点数计算-乘法</p>",
            "summary": "<p>浮点数计算-乘法</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 60,
        "codeStart": 79,
        "code": "const multiply = (...args) => {\n    return [].concat(...args).reduce((prev, cur) => {\n        return mulTwo(prev, cur);\n    }, 1);\n};",
        "ctx": {
            "type": "declaration",
            "name": "multiply",
            "value": "(...args) => {",
            "string": "multiply"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} a 除数",
                "name": "a",
                "description": "<p>除数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Number} b 被除数",
                "name": "b",
                "description": "<p>被除数</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Number} 运算之差",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>运算之差</p>"
            },
            {
                "type": "example",
                "string": "\ndivide(0.3, 0.1)\n// => 3",
                "html": "<p>divide(0.3, 0.1)<br />\n// =&gt; 3</p>"
            }
        ],
        "description": {
            "full": "<p>浮点数计算-除法</p>",
            "summary": "<p>浮点数计算-除法</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 85,
        "codeStart": 95,
        "code": "const divide = (a, b) => {\n    const decMax = Math.max(getDecLength(a), getDecLength(b));\n    const temp = 10 ** decMax;\n    return mulTwo(a, temp) / mulTwo(b, temp);\n};",
        "ctx": {
            "type": "declaration",
            "name": "divide",
            "value": "(a, b) => {",
            "string": "divide"
        }
    }
]