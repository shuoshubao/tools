[
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} [time] 等待时长(秒)",
                "name": "[time]",
                "description": "<p>等待时长(秒)</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "example",
                "string": "\nawait sleep()\nconsole.log('hi')\n// => random(0, 1) 秒后输出: 'hi'",
                "html": "<p>await sleep()<br />\nconsole.log('hi')<br />\n// =&gt; random(0, 1) 秒后输出: 'hi'</p>"
            },
            {
                "type": "example",
                "string": "await sleep(3)\nconsole.log('hi')\n// => 3 秒后输出: 'hi'",
                "html": "<p>await sleep(3)<br />\nconsole.log('hi')<br />\n// =&gt; 3 秒后输出: 'hi'</p>"
            },
            {
                "type": "example",
                "string": "await sleep(2, 5)\nconsole.log('hi')\n// => random(2, 5) 秒后输出: 'hi'",
                "html": "<p>await sleep(2, 5)<br />\nconsole.log('hi')<br />\n// =&gt; random(2, 5) 秒后输出: 'hi'</p>"
            }
        ],
        "description": {
            "full": "<p>睡眠函数<br />\n可用于模拟接口请求, 或者 setTimeout 的替代形式</p>",
            "summary": "<p>睡眠函数<br />\n可用于模拟接口请求, 或者 setTimeout 的替代形式</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 3,
        "codeStart": 23,
        "code": "const sleep = (...args) => {\n    let sleepTime;\n    if (args.length === 1) {\n        sleepTime = args[0];\n    } else {\n        sleepTime = random(...args);\n    }\n    sleepTime *= 1000;\n    return new Promise(resolve => {\n        setTimeout(() => {\n            resolve(sleepTime);\n        }, sleepTime);\n    });\n};",
        "ctx": {
            "type": "declaration",
            "name": "sleep",
            "value": "(...args) => {",
            "string": "sleep"
        }
    }
]