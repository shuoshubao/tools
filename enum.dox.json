[
    {
        "tags": [
            {
                "type": "param",
                "string": "{*} value     value 值",
                "name": "value",
                "description": "<p>value 值</p>",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Array}  [data=[{ value, label }]]      数据源",
                "name": "[data=[{ value, label }]]",
                "description": "<p>数据源</p>",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} [emptyText='--'] 空值",
                "name": "[emptyText='--']",
                "description": "<p>空值</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}           value对应的label",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>value对应的label</p>"
            },
            {
                "type": "example",
                "string": "\nconst data = [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]\ngetLabelByValue(5, data)\n// => '优秀'",
                "html": "<p>const data = [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]<br />\ngetLabelByValue(5, data)<br />\n// =&gt; '优秀'</p>"
            },
            {
                "type": "example",
                "string": "getLabelByValue('5', data)\n// => '优秀'",
                "html": "<p>getLabelByValue('5', data)<br />\n// =&gt; '优秀'</p>"
            },
            {
                "type": "example",
                "string": "getLabelByValue(null, data)\n// => '--'",
                "html": "<p>getLabelByValue(null, data)<br />\n// =&gt; '--'</p>"
            },
            {
                "type": "example",
                "string": "getLabelByValue(null, data, '暂无')\n// => '暂无'",
                "html": "<p>getLabelByValue(null, data, '暂无')<br />\n// =&gt; '暂无'</p>"
            }
        ],
        "description": {
            "full": "<p>通过 value 获取 label</p>",
            "summary": "<p>通过 value 获取 label</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 4,
        "codeStart": 28,
        "code": "const getLabelByValue = (value, data = [], emptyText = '--') => {\n    const item = data.find(v => String(v.value) === String(value));\n    if (item) {\n        return item.label;\n    }\n    return emptyText;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getLabelByValue",
            "value": "(value, data = [], emptyText = '--') => {",
            "string": "getLabelByValue"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} [data={}] json数据",
                "name": "[data={}]",
                "description": "<p>json数据</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Array}      标准的枚举数据格式 [{ value, label }]",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>标准的枚举数据格式 [{ value, label }]</p>"
            },
            {
                "type": "example",
                "string": "\nconst data = { 优秀: 5, 良好: 4, 及格: 3 }\nconvertJsonToEnum(data)\n// => [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]",
                "html": "<p>const data = { 优秀: 5, 良好: 4, 及格: 3 }<br />\nconvertJsonToEnum(data)<br />\n// =&gt; [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]</p>"
            }
        ],
        "description": {
            "full": "<p>将 json 转换成 [{ value, label }]</p>",
            "summary": "<p>将 json 转换成 [{ value, label }]</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 36,
        "codeStart": 46,
        "code": "const convertJsonToEnum = (data = {}) => {\n    return Object.entries(data).reduce((prev, [k, v]) => {\n        prev.push({\n            value: k,\n            label: v\n        });\n        return prev;\n    }, []);\n};",
        "ctx": {
            "type": "declaration",
            "name": "convertJsonToEnum",
            "value": "(data = {}) => {",
            "string": "convertJsonToEnum"
        }
    },
    {
        "tags": [
            {
                "type": "see",
                "string": "getLabelByValue",
                "local": "getLabelByValue",
                "html": "<p>getLabelByValue</p>"
            },
            {
                "type": "param",
                "string": "{*} label     label 值",
                "name": "label",
                "description": "<p>label 值</p>",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Array}  [data=[{ value, label }]]      数据源",
                "name": "[data=[{ value, label }]]",
                "description": "<p>数据源</p>",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} [emptyText='--'] 空值",
                "name": "[emptyText='--']",
                "description": "<p>空值</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}           value对应的label",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>value对应的label</p>"
            },
            {
                "type": "example",
                "string": "\nconst data = [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]\ngetValueByLabel('优秀', data)\n// => 5",
                "html": "<p>const data = [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]<br />\ngetValueByLabel('优秀', data)<br />\n// =&gt; 5</p>"
            }
        ],
        "description": {
            "full": "<p>通过 label 获取 value</p>",
            "summary": "<p>通过 label 获取 value</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 56,
        "codeStart": 69,
        "code": "const getValueByLabel = (label, data = [], emptyText = '--') => {\n    let tempData = data;\n    if (!Array.isArray(data)) {\n        tempData = convertJsonToEnum(data);\n    }\n    const item = tempData.find(v => String(v.label) === String(label));\n    if (item) {\n        return item.value;\n    }\n    return emptyText;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getValueByLabel",
            "value": "(label, data = [], emptyText = '--') => {",
            "string": "getValueByLabel"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} res     数据源",
                "name": "res",
                "description": "<p>数据源</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [options]={} { path = '', valueKey = 'value', labelKey = 'label', renderLabel = node => node.label }",
                "name": "[options]={}",
                "description": "<p>{ path = '', valueKey = 'value', labelKey = 'label', renderLabel = node =&gt; node.label }</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Array}         标准的枚举数据格式 [{ value, label }]",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>标准的枚举数据格式 [{ value, label }]</p>"
            },
            {
                "type": "example",
                "string": "\nconst res = { code: 1, data: { list: [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }] }, message: 'success' }\nconvertDataToEnum(res, { path: 'data.list', valueKey: 'code', labelKey: 'desc' })\n// => [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]",
                "html": "<p>const res = { code: 1, data: { list: [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }] }, message: 'success' }<br />\nconvertDataToEnum(res, { path: 'data.list', valueKey: 'code', labelKey: 'desc' })<br />\n// =&gt; [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格' }]</p>"
            }
        ],
        "description": {
            "full": "<p>将任意数据返回转换成 Enum [{ value, label }]</p>",
            "summary": "<p>将任意数据返回转换成 Enum [{ value, label }]</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 81,
        "codeStart": 92,
        "code": "const convertDataToEnum = (res, options = {}) => {\n    if (isEmptyValue(res)) {\n        return [];\n    }\n    const {\n        path = '', // list 的路径\n        valueKey = 'value',\n        labelKey = 'label',\n        renderLabel = node => node.label\n    } = options;\n    const list = path ? get(res, path, []) : res;\n    return list.map(v => {\n        // 数组的每一项是基本类型: number | string\n        if (typeof v !== 'object') {\n            return {\n                value: v,\n                label: v\n            };\n        }\n        const value = get(v, valueKey);\n        const label = renderLabel({\n            ...v,\n            value,\n            label: get(v, labelKey)\n        });\n        return {\n            ...v,\n            value,\n            label\n        };\n    });\n};",
        "ctx": {
            "type": "declaration",
            "name": "convertDataToEnum",
            "value": "(res, options = {}) => {",
            "string": "convertDataToEnum"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} res    数据源",
                "name": "res",
                "description": "<p>数据源</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [options]={} { path = '', valueKey = 'value', labelKey = 'label', childrenKey = 'children', renderLabel = node => node.label }",
                "name": "[options]={}",
                "description": "<p>{ path = '', valueKey = 'value', labelKey = 'label', childrenKey = 'children', renderLabel = node =&gt; node.label }</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Array}         标准的枚举数据格式 [{ value, label }]",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>标准的枚举数据格式 [{ value, label }]</p>"
            },
            {
                "type": "example",
                "string": "\nconst res = { code: 1, data: { list: [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格', list: [ { code: 3.5, desc: '一般' }] }] }, message: 'success' }\nconvertDataToCascader(res, { path: 'data.list', valueKey: 'code', labelKey: 'desc', childrenKey: 'list' })\n// => [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格', children: [{ value: 3.5, label: '一般' }] }]",
                "html": "<p>const res = { code: 1, data: { list: [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格', list: [ { code: 3.5, desc: '一般' }] }] }, message: 'success' }<br />\nconvertDataToCascader(res, { path: 'data.list', valueKey: 'code', labelKey: 'desc', childrenKey: 'list' })<br />\n// =&gt; [{ value: 5, label: '优秀' }, { value: 4, label: '良好' }, { value: 3, label: '及格', children: [{ value: 3.5, label: '一般' }] }]</p>"
            }
        ],
        "description": {
            "full": "<p>将任意数据返回转换成 Cascader: [{ value, label, children: [{ value, label }]}]</p>",
            "summary": "<p>将任意数据返回转换成 Cascader: [{ value, label, children: [{ value, label }]}]</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 125,
        "codeStart": 136,
        "code": "const convertDataToCascader = (res, config) => {\n    const { path = '', valueKey = 'value', labelKey = 'label', childrenKey = 'children', renderLabel = node => node.label } = config;\n    const convertData = data => {\n        return data.reduce((prev, cur) => {\n            const item = {\n                value: cur[valueKey],\n                label: cur[labelKey],\n                children: []\n            };\n            item.label = renderLabel(item);\n            if (cur[childrenKey]) {\n                item.children = convertData(cur[childrenKey]);\n            }\n            prev.push(item);\n            return prev;\n        }, []);\n    };\n    const list = path ? get(res, path, []) : res;\n    return convertData(list);\n};",
        "ctx": {
            "type": "declaration",
            "name": "convertDataToCascader",
            "value": "(res, config) => {",
            "string": "convertDataToCascader"
        }
    },
    {
        "tags": [
            {
                "type": "see",
                "string": "getLabelByValue",
                "local": "getLabelByValue",
                "html": "<p>getLabelByValue</p>"
            },
            {
                "type": "param",
                "string": "{*} value      值",
                "name": "value",
                "description": "<p>值</p>",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Array}  data 数据源",
                "name": "data",
                "description": "<p>数据源</p>",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} options    { key = '', valueKey = '', emptyText = '--' }",
                "name": "options",
                "description": "<p>{ key = '', valueKey = '', emptyText = '--' }</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}            值",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>值</p>"
            },
            {
                "type": "example",
                "string": "\nconst data = [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }];\ngetValueInCollection('优秀', data, { key: 'code', valueKey: 'desc' })\n// => 5",
                "html": "<p>const data = [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }];<br />\ngetValueInCollection('优秀', data, { key: 'code', valueKey: 'desc' })<br />\n// =&gt; 5</p>"
            },
            {
                "type": "example",
                "string": "\nconst data = [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }];\ngetValueInCollection(5, data, { valueKey: 'desc', key: 'code' })\n// => '优秀'",
                "html": "<p>const data = [{ code: 5, desc: '优秀' }, { code: 4, desc: '良好' }, { code: 3, desc: '及格' }];<br />\ngetValueInCollection(5, data, { valueKey: 'desc', key: 'code' })<br />\n// =&gt; '优秀'</p>"
            }
        ],
        "description": {
            "full": "<p>从集合中取值<br />\n比 getLabelByValue 更宽松, 容错, 默认值</p>",
            "summary": "<p>从集合中取值<br />\n比 getLabelByValue 更宽松, 容错, 默认值</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 157,
        "codeStart": 177,
        "code": "const getValueInCollection = (value, data = [], options = {}) => {\n    const { key = '', valueKey = '', emptyText = '--' } = options;\n    const item = data.find(v => {\n        return String(value) === String(v[key]);\n    });\n    if (item) {\n        return item[valueKey];\n    }\n    return emptyText;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getValueInCollection",
            "value": "(value, data = [], options = {}) => {",
            "string": "getValueInCollection"
        }
    }
]