[
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} str 字符串",
                "name": "str",
                "description": "<p>字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}     去掉所有空白的字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>去掉所有空白的字符串</p>"
            },
            {
                "type": "example",
                "string": "\ntrimAll(' a b c ');\n// => 'abc'",
                "html": "<p>trimAll(' a b c ');<br />\n// =&gt; 'abc'</p>"
            }
        ],
        "description": {
            "full": "<p>trim 所有空白</p>",
            "summary": "<p>trim 所有空白</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 5,
        "codeStart": 14,
        "code": "const trimAll = (str = '') => {\n    return str.replace(/\\s+/g, '');\n};",
        "ctx": {
            "type": "declaration",
            "name": "trimAll",
            "value": "(str = '') => {",
            "string": "trimAll"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} str 字符串",
                "name": "str",
                "description": "<p>字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}     帕斯卡形式的字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>帕斯卡形式的字符串</p>"
            },
            {
                "type": "example",
                "string": "\npascalCase('a b c');\n// => 'ABC'",
                "html": "<p>pascalCase('a b c');<br />\n// =&gt; 'ABC'</p>"
            },
            {
                "type": "example",
                "string": "\npascalCase('a-b-c');\n// => 'ABC'",
                "html": "<p>pascalCase('a-b-c');<br />\n// =&gt; 'ABC'</p>"
            },
            {
                "type": "example",
                "string": "\npascalCase('a_b_c');\n// => 'ABC'",
                "html": "<p>pascalCase('a_b_c');<br />\n// =&gt; 'ABC'</p>"
            },
            {
                "type": "example",
                "string": "\npascalCase('a,b,c');\n// => 'ABC'",
                "html": "<p>pascalCase('a,b,c');<br />\n// =&gt; 'ABC'</p>"
            },
            {
                "type": "example",
                "string": "\npascalCase('aBc');\n// => 'ABc'",
                "html": "<p>pascalCase('aBc');<br />\n// =&gt; 'ABc'</p>"
            }
        ],
        "description": {
            "full": "<p>帕斯卡</p>",
            "summary": "<p>帕斯卡</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 18,
        "codeStart": 47,
        "code": "const pascalCase = (string = '') => {\n    const matchs = string.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);\n    if (!matchs) {\n        return '';\n    }\n    return matchs\n        .map(x => {\n            return x.charAt(0).toUpperCase() + x.slice(1).toLowerCase();\n        })\n        .join('');\n};",
        "ctx": {
            "type": "declaration",
            "name": "pascalCase",
            "value": "(string = '') => {",
            "string": "pascalCase"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Number} value  值",
                "name": "value",
                "description": "<p>值</p>",
                "types": [
                    "Number"
                ],
                "typesDescription": "<code>Number</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} config { emptyText = '--', // 空文本 reverse = false, // 颜色切换 disabled = false // 不使用颜色 }",
                "name": "config",
                "description": "<p>{ emptyText = '--', // 空文本 reverse = false, // 颜色切换 disabled = false // 不使用颜色 }</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}        html 字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>html 字符串</p>"
            },
            {
                "type": "example",
                "string": "\ngetPercentageHtml(0.23)\n// => '<span style=\"color: #00b365;\">23%</span>'",
                "html": "<p>getPercentageHtml(0.23)<br />\n// =&gt; '<span style=\"color: #00b365;\">23%</span>'</p>"
            },
            {
                "type": "example",
                "string": "\ngetPercentageHtml(-0.23)\n// => '<span style=\"color: #00b365;\">-23%</span>'",
                "html": "<p>getPercentageHtml(-0.23)<br />\n// =&gt; '<span style=\"color: #00b365;\">-23%</span>'</p>"
            },
            {
                "type": "example",
                "string": "\ngetPercentageHtml(0.23, { disabled: true })\n// => '23%'",
                "html": "<p>getPercentageHtml(0.23, { disabled: true })<br />\n// =&gt; '23%'</p>"
            }
        ],
        "description": {
            "full": "<p>百分比html<br />\n正: 绿; 负: 红</p>",
            "summary": "<p>百分比html<br />\n正: 绿; 负: 红</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 59,
        "codeStart": 80,
        "code": "const getPercentageHtml = (value, config = {}) => {\n    const {\n        emptyText = '--', // 空文本\n        reverse = false, // 颜色切换\n        disabled = false // 不使用颜色\n    } = config;\n    const tempValue = formatters.percentage(value);\n    const greenColor = '#00b365';\n    const redColor = '#f5483b';\n    if (value > 0) {\n        if (disabled) {\n            return tempValue;\n        }\n        return `<span style=\"color: ${reverse ? redColor : greenColor};\">${tempValue}</span>`;\n    }\n    if (value < 0) {\n        if (disabled) {\n            return tempValue;\n        }\n        return `<span style=\"color: ${reverse ? greenColor : redColor};\">${tempValue}</span>`;\n    }\n    if (value === 0) {\n        return tempValue;\n    }\n    return String(emptyText);\n};\n\n// 自闭合标签\nconst voidHtmlTags = ['area', 'base', 'br', 'col', 'embed', 'hr', 'img', 'input', 'link', 'menuitem', 'meta', 'param', 'source', 'track', 'wbr'];\n\nconst attrKeyAlias = {\n    className: 'class'\n};\n\nconst gernerateElementText = (tagName = '', attrs = {}, text = '') => {\n    const attrsText = Object.entries(attrs || {})\n        .map(([k, v]) => {\n            const key = attrKeyAlias[k] || k;\n            if (key === 'style') {\n                return [key, `\"${getCssText(v)}\"`].join('=');\n            }\n            return [key, `\"${v}\"`].join('=');\n        })\n        .join(' ');\n    const tagNameStart = [tagName, attrsText].filter(Boolean).join(' ');\n    if (voidHtmlTags.includes(tagName)) {\n        return `<${tagNameStart} />`;\n    }\n    return `<${tagNameStart}>${text}</${tagName}>`;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getPercentageHtml",
            "value": "(value, config = {}) => {",
            "string": "getPercentageHtml"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} type  标签名",
                "name": "type",
                "description": "<p>标签名</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} attrs    属性",
                "name": "attrs",
                "description": "<p>属性</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Array}  children 子元素",
                "name": "children",
                "description": "<p>子元素</p>",
                "types": [
                    "Array"
                ],
                "typesDescription": "<code>Array</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}          html字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>html字符串</p>"
            },
            {
                "type": "example",
                "string": "\ncreateElement('div', { id: 'demo', className: 'demo' }, 'hello') // <div id=\"demo\" className=\"demo\">hello</div>",
                "html": "<p>createElement('div', { id: 'demo', className: 'demo' }, 'hello') // <div id=\"demo\" className=\"demo\">hello</div></p>"
            }
        ],
        "description": {
            "full": "<p>createElement</p>",
            "summary": "<p>createElement</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 131,
        "codeStart": 141,
        "code": "const createElement = (type = '', props = {}, children = []) => {\n    if (isString(children) || isNumber(children)) {\n        return gernerateElementText(type, props, children);\n    }\n    return gernerateElementText(\n        type,\n        props,\n        children\n            .map(v => {\n                return createElement(...v);\n            })\n            .join('')\n    );\n};\n\n// 解析url: [文案|链接]\nconst linkReg = /\\[(.+?)\\|(.+?)\\]/g;",
        "ctx": {
            "type": "declaration",
            "name": "createElement",
            "value": "(type = '', props = {}, children = []) => {",
            "string": "createElement"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{...String} args  字符串",
                "name": "args",
                "description": "<p>字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "...<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": true
            },
            {
                "type": "return",
                "string": "{String[]}    html 字符串",
                "types": [
                    "Array[String]"
                ],
                "typesDescription": "<code>String</code>[]",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>html 字符串</p>"
            },
            {
                "type": "example",
                "string": "\ngetTooltipHtml('abc')\n// => ['abc']",
                "html": "<p>getTooltipHtml('abc')<br />\n// =&gt; ['abc']</p>"
            },
            {
                "type": "example",
                "string": "\ngetTooltipHtml('aa[链接|cc.co]bb')\n// => ['aa<a heref=\"cc.co\" style=\"color: #fff; fontWeight: bold; textDecoration: underline\">链接</a>bb']",
                "html": "<p>getTooltipHtml('aa[链接|cc.co]bb')<br />\n// =&gt; ['aa<a heref=\"cc.co\" style=\"color: #fff; fontWeight: bold; textDecoration: underline\">链接</a>bb']</p>"
            }
        ],
        "description": {
            "full": "<p>字符串转链接</p>",
            "summary": "<p>字符串转链接</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 159,
        "codeStart": 173,
        "code": "const getTooltipHtml = (...args) => {\n    return []\n        .concat(...args)\n        .filter(Boolean)\n        .map(String)\n        .map(v => {\n            return v.replace(/\\\\n/g, '<br>');\n        })\n        .map(v => {\n            return v.replace(linkReg, (...args) => {\n                const [, text, href] = args;\n                return gernerateElementText(\n                    'a',\n                    {\n                        href,\n                        target: '_blank',\n                        style: {\n                            color: '#fff',\n                            fontWeight: 'bold',\n                            textDecoration: 'underline'\n                        }\n                    },\n                    text\n                );\n            });\n        });\n};",
        "ctx": {
            "type": "declaration",
            "name": "getTooltipHtml",
            "value": "(...args) => {",
            "string": "getTooltipHtml"
        }
    }
]