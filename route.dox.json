[
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} [queryString] query字符串",
                "name": "[queryString]",
                "description": "<p>query字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Object}             query对象",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>query对象</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse()\n// => {}",
                "html": "<p>queryParse()<br />\n// =&gt; {}</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('')\n// => {}",
                "html": "<p>queryParse('')<br />\n// =&gt; {}</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('?')\n// => {}",
                "html": "<p>queryParse('?')<br />\n// =&gt; {}</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('?a')\n// => { a: null }",
                "html": "<p>queryParse('?a')<br />\n// =&gt; { a: null }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('?a=1')\n// => { a: '1' }",
                "html": "<p>queryParse('?a=1')<br />\n// =&gt; { a: '1' }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1')\n// => { a: '1' }",
                "html": "<p>queryParse('a=1')<br />\n// =&gt; { a: '1' }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=true')\n// => { a: 'true' }",
                "html": "<p>queryParse('a=true')<br />\n// =&gt; { a: 'true' }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1&b')\n// => { a: '1', b: null }",
                "html": "<p>queryParse('a=1&amp;b')<br />\n// =&gt; { a: '1', b: null }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1&b=2')\n// => { a: '1', b: '2' }",
                "html": "<p>queryParse('a=1&amp;b=2')<br />\n// =&gt; { a: '1', b: '2' }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1&b&c')\n// => { a: '1', b: null, c: null }",
                "html": "<p>queryParse('a=1&amp;b&amp;c')<br />\n// =&gt; { a: '1', b: null, c: null }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1&b=2&c&d=2&d=3')\n// => { a: '1', b: '2', c: null, d: ['2', '3'] }",
                "html": "<p>queryParse('a=1&amp;b=2&amp;c&amp;d=2&amp;d=3')<br />\n// =&gt; { a: '1', b: '2', c: null, d: ['2', '3'] }</p>"
            },
            {
                "type": "example",
                "string": "\nqueryParse('a=1&b=2&c&d=2&d=3&d')\n// => { a: '1', b: '2', c: null, d: ['2', '3', null] }",
                "html": "<p>queryParse('a=1&amp;b=2&amp;c&amp;d=2&amp;d=3&amp;d')<br />\n// =&gt; { a: '1', b: '2', c: null, d: ['2', '3', null] }</p>"
            }
        ],
        "description": {
            "full": "<p>将query字符串变成对象</p>",
            "summary": "<p>将query字符串变成对象</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 4,
        "codeStart": 68,
        "code": "const queryParse = (queryString = '') => {\n    let query;\n    if (queryString.startsWith('?')) {\n        query = queryString.substring(1);\n    } else {\n        query = queryString;\n    }\n    if (isEmptyString(query)) {\n        return {};\n    }\n    return query.split('&').reduce((prev, cur) => {\n        const [k, v = null] = cur.split('=');\n        const val = isNull(v) ? v : decodeURIComponent(v);\n        if (isUndefined(prev[k])) {\n            prev[k] = val;\n        } else {\n            prev[k] = [].concat(prev[k], val);\n        }\n        return prev;\n    }, {});\n};",
        "ctx": {
            "type": "declaration",
            "name": "queryParse",
            "value": "(queryString = '') => {",
            "string": "queryParse"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} [params] query对象",
                "name": "[params]",
                "description": "<p>query对象</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}        query字符串",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>query字符串</p>"
            },
            {
                "type": "example",
                "string": "queryStringify()\n// => ''",
                "html": "<p>queryStringify()<br />\n// =&gt; ''</p>"
            },
            {
                "type": "example",
                "string": "queryStringify(null)\n// => ''",
                "html": "<p>queryStringify(null)<br />\n// =&gt; ''</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({})\n// => ''",
                "html": "<p>queryStringify({})<br />\n// =&gt; ''</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1 })\n// => 'a=1'",
                "html": "<p>queryStringify({ a: 1 })<br />\n// =&gt; 'a=1'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: '1' })\n// => 'a=1'",
                "html": "<p>queryStringify({ a: '1' })<br />\n// =&gt; 'a=1'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: 2 })\n// => 'a=1&b=2'",
                "html": "<p>queryStringify({ a: 1, b: 2 })<br />\n// =&gt; 'a=1&amp;b=2'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: null })\n// => 'a=1&b'",
                "html": "<p>queryStringify({ a: 1, b: null })<br />\n// =&gt; 'a=1&amp;b'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: null, c: null })\n// => 'a=1&b&c'",
                "html": "<p>queryStringify({ a: 1, b: null, c: null })<br />\n// =&gt; 'a=1&amp;b&amp;c'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: undefined, c: null })\n// => 'a=1&c'",
                "html": "<p>queryStringify({ a: 1, b: undefined, c: null })<br />\n// =&gt; 'a=1&amp;c'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: true })\n// => 'a=true'",
                "html": "<p>queryStringify({ a: true })<br />\n// =&gt; 'a=true'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: true, b: false })\n// => 'a=true&b=false'",
                "html": "<p>queryStringify({ a: true, b: false })<br />\n// =&gt; 'a=true&amp;b=false'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: 2, c: null, d: [2, 3] })\n// => 'a=1&b=2&c&d=2&d=3'",
                "html": "<p>queryStringify({ a: 1, b: 2, c: null, d: [2, 3] })<br />\n// =&gt; 'a=1&amp;b=2&amp;c&amp;d=2&amp;d=3'</p>"
            },
            {
                "type": "example",
                "string": "queryStringify({ a: 1, b: 2, c: null, d: [2, undefined, 3, null] })\n// => 'a=1&b=2&c&d=2&d=3&d'",
                "html": "<p>queryStringify({ a: 1, b: 2, c: null, d: [2, undefined, 3, null] })<br />\n// =&gt; 'a=1&amp;b=2&amp;c&amp;d=2&amp;d=3&amp;d'</p>"
            }
        ],
        "description": {
            "full": "<p>将对象变成query字符串</p>",
            "summary": "<p>将对象变成query字符串</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 90,
        "codeStart": 146,
        "code": "const queryStringify = (params = {}) => {\n    return Object.entries(params || {})\n        .reduce((prev, cur) => {\n            const [k, v] = cur;\n            if (isUndefined(v)) {\n                return prev;\n            }\n            if (isNull(v)) {\n                prev.push(k);\n            } else {\n                const list = []\n                    .concat(v)\n                    .filter(v2 => {\n                        return !isUndefined(v2);\n                    })\n                    .map(v2 => {\n                        const val = encodeURIComponent(v2);\n                        return isNull(v2) ? k : [k, val].join('=');\n                    });\n                prev.push(...list);\n            }\n            return prev;\n        }, [])\n        .join('&');\n};",
        "ctx": {
            "type": "declaration",
            "name": "queryStringify",
            "value": "(params = {}) => {",
            "string": "queryStringify"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} str query字符串",
                "name": "str",
                "description": "<p>query字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} key query的key",
                "name": "key",
                "description": "<p>query的key</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String|Object}     完整的query对象或者单个的query值",
                "types": [
                    "String",
                    "Object"
                ],
                "typesDescription": "<code>String</code> | <code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>完整的query对象或者单个的query值</p>"
            },
            {
                "type": "example",
                "string": "\ngetParams('a=1&b=2&c&d=2&d=3')\n// => { a: '1', b: '2', c: null, d: ['2', '3'] }",
                "html": "<p>getParams('a=1&amp;b=2&amp;c&amp;d=2&amp;d=3')<br />\n// =&gt; { a: '1', b: '2', c: null, d: ['2', '3'] }</p>"
            },
            {
                "type": "example",
                "string": "\ngetParams('a=1&b=2&c&d=2&d=3', 'a')\n// => '1'",
                "html": "<p>getParams('a=1&amp;b=2&amp;c&amp;d=2&amp;d=3', 'a')<br />\n// =&gt; '1'</p>"
            }
        ],
        "description": {
            "full": "<p>获取参数</p>",
            "summary": "<p>获取参数</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 172,
        "codeStart": 187,
        "code": "const getParams = (str, key) => {\n    const params = queryParse(str);\n    if (isEmptyValue(key)) {\n        return params;\n    }\n    return params[key];\n};",
        "ctx": {
            "type": "declaration",
            "name": "getParams",
            "value": "(str, key) => {",
            "string": "getParams"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} key key值",
                "name": "key",
                "description": "<p>key值</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String|Object}    传key时返回字符串; 不传key时, 则返回所有query参数的json",
                "types": [
                    "String",
                    "Object"
                ],
                "typesDescription": "<code>String</code> | <code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>传key时返回字符串; 不传key时, 则返回所有query参数的json</p>"
            },
            {
                "type": "example",
                "string": "\n// 假设当前的url为 http://aa.com/abc/d?a=1&b=2\nsearch()\n// => { a: '1', b: '2' }\n\nsearch('a')\n// => '1'",
                "html": "<p>// 假设当前的url为 http://aa.com/abc/d?a=1&amp;b=2<br />\nsearch()<br />\n// =&gt; { a: '1', b: '2' }</p>\n<p>search('a')<br />\n// =&gt; '1'</p>"
            }
        ],
        "description": {
            "full": "<p>获取 search 参数</p>",
            "summary": "<p>获取 search 参数</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 195,
        "codeStart": 208,
        "code": "const search = (key = '') => {\n    // 从hash里解析 search 参数 (router 模式)\n    const [, str = ''] = (window.location.search || window.location.hash).split('?');\n    return getParams(str, key);\n};",
        "ctx": {
            "type": "declaration",
            "name": "search",
            "value": "(key = '') => {",
            "string": "search"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} [url='']    基础url",
                "name": "[url='']",
                "description": "<p>基础url</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [params={}] query参数",
                "name": "[params={}]",
                "description": "<p>query参数</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}        拼接的完整url",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>拼接的完整url</p>"
            },
            {
                "type": "example",
                "string": "\nstringifyUrl('', { a: 1 })\n// => '?a=1'",
                "html": "<p>stringifyUrl('', { a: 1 })<br />\n// =&gt; '?a=1'</p>"
            },
            {
                "type": "example",
                "string": "\nstringifyUrl('abc', { a: 1 })\n// => 'abc?a=1'",
                "html": "<p>stringifyUrl('abc', { a: 1 })<br />\n// =&gt; 'abc?a=1'</p>"
            },
            {
                "type": "example",
                "string": "\nstringifyUrl('http://aa.com/abc/d', { a: 1 })\n// => 'http://aa.com/abc/d?a=1'",
                "html": "<p>stringifyUrl('http://aa.com/abc/d', { a: 1 })<br />\n// =&gt; 'http://aa.com/abc/d?a=1'</p>"
            }
        ],
        "description": {
            "full": "<p>拼接url</p>",
            "summary": "<p>拼接url</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 214,
        "codeStart": 234,
        "code": "const stringifyUrl = (url = '', params = {}) => {\n    const args = Object.entries(params).reduce((prev, [k, v]) => {\n        if (!isNil(v) && v !== '') {\n            prev[k] = v;\n        }\n        return prev;\n    }, {});\n    if (isEmptyObject(args)) {\n        return url;\n    }\n    return [url, queryStringify(args)].join('?');\n};",
        "ctx": {
            "type": "declaration",
            "name": "stringifyUrl",
            "value": "(url = '', params = {}) => {",
            "string": "stringifyUrl"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{Object} params 新的query参数",
                "name": "params",
                "description": "<p>新的query参数</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{String} url    基础url",
                "name": "url",
                "description": "<p>基础url</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}        更新query后的完整url",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>更新query后的完整url</p>"
            },
            {
                "type": "example",
                "string": "\nupdateUrlQuery({ a: 1 }, '');\n// => '?a=1'",
                "html": "<p>updateUrlQuery({ a: 1 }, '');<br />\n// =&gt; '?a=1'</p>"
            },
            {
                "type": "example",
                "string": "\nupdateUrlQuery({ a: 2 }, 'http://aa.com/abc/d?a=1')\n// => 'http://aa.com/abc/d?a=2'",
                "html": "<p>updateUrlQuery({ a: 2 }, 'http://aa.com/abc/d?a=1')<br />\n// =&gt; 'http://aa.com/abc/d?a=2'</p>"
            }
        ],
        "description": {
            "full": "<p>更新 url 某个参数</p>",
            "summary": "<p>更新 url 某个参数</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 247,
        "codeStart": 262,
        "code": "const updateUrlQuery = (params = {}, url = '') => {\n    const baseUrl = url.split('?')[0];\n    const query = getParams(url.split('?')[1] || '');\n    return stringifyUrl(baseUrl, { ...query, ...params });\n};",
        "ctx": {
            "type": "declaration",
            "name": "updateUrlQuery",
            "value": "(params = {}, url = '') => {",
            "string": "updateUrlQuery"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} url     基础url",
                "name": "url",
                "description": "<p>基础url</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [params={}]  query参数",
                "name": "[params={}]",
                "description": "<p>query参数</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "param",
                "string": "{Object} [options={}] a链接的属性",
                "name": "[options={}]",
                "description": "<p>a链接的属性</p>",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{*}         跳转页面",
                "types": "[object Object]",
                "typesDescription": "*",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>跳转页面</p>"
            },
            {
                "type": "example",
                "string": "\nlinkTo('http://aa.com/abc/d', { a: 1 })\n// => 打开页面 http://aa.com/abc/d?a=1",
                "html": "<p>linkTo('http://aa.com/abc/d', { a: 1 })<br />\n// =&gt; 打开页面 http://aa.com/abc/d?a=1</p>"
            },
            {
                "type": "example",
                "string": "\nlinkTo('http://aa.com/abc/d', { a: 1 }, { target: '_blank' })\n// => 新标签打开页面 http://aa.com/abc/d?a=1",
                "html": "<p>linkTo('http://aa.com/abc/d', { a: 1 }, { target: '_blank' })<br />\n// =&gt; 新标签打开页面 http://aa.com/abc/d?a=1</p>"
            }
        ],
        "description": {
            "full": "<p>跳转页面</p>",
            "summary": "<p>跳转页面</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 268,
        "codeStart": 284,
        "code": "const linkTo = (url = '', params = {}, options = {}) => {\n    const defaultOptions = {\n        target: '_self', // a 标签属性\n        isNewTab: false, // 是否在新 Tab打开（窗口、tab页）\n        rel: 'noreferrer', // a 标签属性\n        download: '' // a 标签属性\n    };\n    const computedOptions = {\n        ...defaultOptions,\n        ...options\n    };\n    if (computedOptions.isNewTab) {\n        computedOptions.target = '_blank';\n    }\n    const { target, rel, download } = computedOptions;\n    const href = stringifyUrl(url, params);\n    const elmentA = document.createElement('a');\n    elmentA.target = target;\n    elmentA.href = href;\n    if (rel) {\n        elmentA.rel = rel;\n    }\n    if (download) {\n        if (download === true) {\n            elmentA.setAttribute('download', '');\n        } else {\n            elmentA.setAttribute('download', download);\n        }\n    }\n    elmentA.setAttribute('hidden', 'hidden');\n    document.body.appendChild(elmentA);\n    elmentA.click();\n    document.body.removeChild(elmentA);\n};",
        "ctx": {
            "type": "declaration",
            "name": "linkTo",
            "value": "(url = '', params = {}, options = {}) => {",
            "string": "linkTo"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} [url=''] url字符串",
                "name": "[url='']",
                "description": "<p>url字符串</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": true,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{Object}     { 'protocol', 'host', 'pathname', 'port', 'search', 'hash', 'origin', 'hostname' }",
                "types": [
                    "Object"
                ],
                "typesDescription": "<code>Object</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>{ 'protocol', 'host', 'pathname', 'port', 'search', 'hash', 'origin', 'hostname' }</p>"
            },
            {
                "type": "example",
                "string": "\nparseUrl('http://aa.com/abc/d?a=1');\n// => {\"protocol\": \"http:\", \"host\": \"aa.com\", \"pathname\": \"/abc/d\", \"port\": \"\", \"search\": \"?a=1\", \"hash\": \"\", \"origin\": \"http://aa.com\", \"hostname\": \"aa.com\"}",
                "html": "<p>parseUrl('http://aa.com/abc/d?a=1');<br />\n// =&gt; {&quot;protocol&quot;: &quot;http:&quot;, &quot;host&quot;: &quot;aa.com&quot;, &quot;pathname&quot;: &quot;/abc/d&quot;, &quot;port&quot;: &quot;&quot;, &quot;search&quot;: &quot;?a=1&quot;, &quot;hash&quot;: &quot;&quot;, &quot;origin&quot;: &quot;http://aa.com&quot;, &quot;hostname&quot;: &quot;aa.com&quot;}</p>"
            }
        ],
        "description": {
            "full": "<p>解析 url</p>",
            "summary": "<p>解析 url</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 319,
        "codeStart": 328,
        "code": "const parseUrl = (url = '') => {\n    let elmentA = document.createElement('a');\n    elmentA.href = url;\n    const result = pick(elmentA, ['protocol', 'host', 'pathname', 'port', 'search', 'hash', 'origin', 'hostname']);\n    elmentA = null;\n    return result;\n};",
        "ctx": {
            "type": "declaration",
            "name": "parseUrl",
            "value": "(url = '') => {",
            "string": "parseUrl"
        }
    },
    {
        "tags": [
            {
                "type": "param",
                "string": "{String} url 相对路径",
                "name": "url",
                "description": "<p>相对路径</p>",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false
            },
            {
                "type": "return",
                "string": "{String}     完整的url",
                "types": [
                    "String"
                ],
                "typesDescription": "<code>String</code>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "description": "<p>完整的url</p>"
            },
            {
                "type": "example",
                "string": "\n// 假设当前的url为 http://aa.com/abc/d?a=1&b=2\ngetFullUrl('/abc')\n// => http://aa.com/abc",
                "html": "<p>// 假设当前的url为 http://aa.com/abc/d?a=1&amp;b=2<br />\ngetFullUrl('/abc')<br />\n// =&gt; http://aa.com/abc</p>"
            }
        ],
        "description": {
            "full": "<p>获取完整 url</p>",
            "summary": "<p>获取完整 url</p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 336,
        "codeStart": 346,
        "code": "const getFullUrl = (url = '') => {\n    if (!url) {\n        return '';\n    }\n    let elmentA = document.createElement('a');\n    elmentA.href = url;\n    const result = elmentA.href;\n    elmentA = null;\n    return result;\n};",
        "ctx": {
            "type": "declaration",
            "name": "getFullUrl",
            "value": "(url = '') => {",
            "string": "getFullUrl"
        }
    }
]