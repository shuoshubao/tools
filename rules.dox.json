[
    {
        "tags": [
            {
                "type": "type",
                "string": "{Array.<ValidatorRules>}",
                "types": [
                    "Array.<ValidatorRules>"
                ],
                "typesDescription": "<code>Array</code>.<<code>ValidatorRules</code>>",
                "optional": false,
                "nullable": false,
                "nonNullable": false,
                "variable": false,
                "html": "<p>{Array.<ValidatorRules>}</p>"
            },
            {
                "type": "example",
                "string": "\nrules.required('Form.Item label')\nrules.selectRequired('Form.Item label')\nrules.multipleRequired('Form.Item label')\nrules.min('Form.Item label', 1)\nrules.max('Form.Item label', 5)\nrules.numberRange('Form.Item label', {  })\n// 数字范围的抽象描述\n[\n    {\n        key: 'eq',\n        description: '等于',\n        validate: (a, b) => {\n            return a === b;\n        }\n    },\n    {\n        key: 'ne',\n        description: '不等于',\n        validate: (a, b) => {\n            return a !== b;\n        }\n    },\n    {\n        key: 'gt',\n        description: '大于',\n        validate: (a, b) => {\n            return a > b;\n        }\n    },\n    {\n        key: 'lt',\n        description: '小于',\n        validate: (a, b) => {\n            return a < b;\n        }\n    },\n    {\n        key: 'ge',\n        description: '大于等于',\n        validate: (a, b) => {\n            return a >= b;\n        }\n    },\n    {\n        key: 'le',\n        description: '小于等于',\n        validate: (a, b) => {\n            return a <= b;\n        }\n    },\n    // 小数位数限制\n    {\n        key: 'decimalLength',\n        description: value => {\n            return ['最多', value, '位小数'].join('');\n        },\n        validate: (a, b) => {\n            const [, decimal = ''] = String(a).split('.');\n            return decimal.length <= b;\n        }\n    }\n]",
                "html": "<p>rules.required('Form.Item label')<br />\nrules.selectRequired('Form.Item label')<br />\nrules.multipleRequired('Form.Item label')<br />\nrules.min('Form.Item label', 1)<br />\nrules.max('Form.Item label', 5)<br />\nrules.numberRange('Form.Item label', {  })<br />\n// 数字范围的抽象描述<br />\n[<br />\n{<br />\nkey: 'eq',<br />\ndescription: '等于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a === b;<br />\n}<br />\n},<br />\n{<br />\nkey: 'ne',<br />\ndescription: '不等于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a !== b;<br />\n}<br />\n},<br />\n{<br />\nkey: 'gt',<br />\ndescription: '大于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a &gt; b;<br />\n}<br />\n},<br />\n{<br />\nkey: 'lt',<br />\ndescription: '小于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a &lt; b;<br />\n}<br />\n},<br />\n{<br />\nkey: 'ge',<br />\ndescription: '大于等于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a &gt;= b;<br />\n}<br />\n},<br />\n{<br />\nkey: 'le',<br />\ndescription: '小于等于',<br />\nvalidate: (a, b) =&gt; {<br />\nreturn a &lt;= b;<br />\n}<br />\n},<br />\n// 小数位数限制<br />\n{<br />\nkey: 'decimalLength',<br />\ndescription: value =&gt; {<br />\nreturn ['最多', value, '位小数'].join('');<br />\n},<br />\nvalidate: (a, b) =&gt; {<br />\nconst [, decimal = ''] = String(a).split('.');<br />\nreturn decimal.length &lt;= b;<br />\n}<br />\n}<br />\n]</p>"
            }
        ],
        "description": {
            "full": "<p>校验规则<br />\n校验库参考: <a href=\"https://www.npmjs.com/package/async-validator\">async-validator</a></p>",
            "summary": "<p>校验规则<br />\n校验库参考: <a href=\"https://www.npmjs.com/package/async-validator\">async-validator</a></p>",
            "body": ""
        },
        "isPrivate": false,
        "isConstructor": false,
        "isClass": false,
        "isEvent": false,
        "ignore": false,
        "line": 179,
        "codeStart": 248,
        "code": "const rules = new ValidatorRules();",
        "ctx": {
            "type": "declaration",
            "name": "rules",
            "value": "new ValidatorRules()",
            "string": "rules"
        }
    }
]